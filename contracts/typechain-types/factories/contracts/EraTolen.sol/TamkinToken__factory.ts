/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TamkinToken,
  TamkinTokenInterface,
} from "../../../contracts/EraTolen.sol/TamkinToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000be738038062000be7833981016040819052620000349162000225565b6040518060400160405280600a8152602001691222a920903a37b5b2b760b11b815250604051806040016040528060048152602001632445524160e01b8152508160039081620000859190620002e4565b506004620000948282620002e4565b505050620000a93382620000b060201b60201c565b50620003d8565b6001600160a01b038216620000e05760405163ec442f0560e01b8152600060048201526024015b60405180910390fd5b620000ee60008383620000f2565b5050565b6001600160a01b03831662000121578060026000828254620001159190620003b0565b90915550620001959050565b6001600160a01b03831660009081526020819052604090205481811015620001765760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401620000d7565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b038216620001b357600280548290039055620001d2565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200021891815260200190565b60405180910390a3505050565b6000602082840312156200023857600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200026a57607f821691505b6020821081036200028b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002df57600081815260208120601f850160051c81016020861015620002ba5750805b601f850160051c820191505b81811015620002db57828155600101620002c6565b5050505b505050565b81516001600160401b038111156200030057620003006200023f565b620003188162000311845462000255565b8462000291565b602080601f831160018114620003505760008415620003375750858301515b600019600386901b1c1916600185901b178555620002db565b600085815260208120601f198616915b82811015620003815788860151825594840194600190910190840162000360565b5085821015620003a05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115620003d257634e487b7160e01b600052601160045260246000fd5b92915050565b6107ff80620003e86000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806342966c681161006657806342966c681461011857806370a082311461012d57806395d89b4114610156578063a9059cbb1461015e578063dd62ed3e1461017157600080fd5b806306fdde03146100a3578063095ea7b3146100c157806318160ddd146100e457806323b872dd146100f6578063313ce56714610109575b600080fd5b6100ab6101aa565b6040516100b89190610630565b60405180910390f35b6100d46100cf36600461069a565b61023c565b60405190151581526020016100b8565b6002545b6040519081526020016100b8565b6100d46101043660046106c4565b610256565b604051601281526020016100b8565b61012b610126366004610700565b61027a565b005b6100e861013b366004610719565b6001600160a01b031660009081526020819052604090205490565b6100ab6102eb565b6100d461016c36600461069a565b6102fa565b6100e861017f36600461073b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101b99061076e565b80601f01602080910402602001604051908101604052809291908181526020018280546101e59061076e565b80156102325780601f1061020757610100808354040283529160200191610232565b820191906000526020600020905b81548152906001019060200180831161021557829003601f168201915b5050505050905090565b60003361024a818585610308565b60019150505b92915050565b60003361026485828561031a565b61026f858585610398565b506001949350505050565b336000908152602081905260409020548111156102de5760405162461bcd60e51b815260206004820152601960248201527f4e6f7420656e6f75676820746f6b656e7320746f206275726e0000000000000060448201526064015b60405180910390fd5b6102e833826103f7565b50565b6060600480546101b99061076e565b60003361024a818585610398565b6103158383836001610431565b505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610392578181101561038357604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016102d5565b61039284848484036000610431565b50505050565b6001600160a01b0383166103c257604051634b637e8f60e11b8152600060048201526024016102d5565b6001600160a01b0382166103ec5760405163ec442f0560e01b8152600060048201526024016102d5565b610315838383610506565b6001600160a01b03821661042157604051634b637e8f60e11b8152600060048201526024016102d5565b61042d82600083610506565b5050565b6001600160a01b03841661045b5760405163e602df0560e01b8152600060048201526024016102d5565b6001600160a01b03831661048557604051634a1406b160e11b8152600060048201526024016102d5565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561039257826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516104f891815260200190565b60405180910390a350505050565b6001600160a01b03831661053157806002600082825461052691906107a8565b909155506105a39050565b6001600160a01b038316600090815260208190526040902054818110156105845760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016102d5565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166105bf576002805482900390556105de565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161062391815260200190565b60405180910390a3505050565b600060208083528351808285015260005b8181101561065d57858101830151858201604001528201610641565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461069557600080fd5b919050565b600080604083850312156106ad57600080fd5b6106b68361067e565b946020939093013593505050565b6000806000606084860312156106d957600080fd5b6106e28461067e565b92506106f06020850161067e565b9150604084013590509250925092565b60006020828403121561071257600080fd5b5035919050565b60006020828403121561072b57600080fd5b6107348261067e565b9392505050565b6000806040838503121561074e57600080fd5b6107578361067e565b91506107656020840161067e565b90509250929050565b600181811c9082168061078257607f821691505b6020821081036107a257634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561025057634e487b7160e01b600052601160045260246000fdfea26469706673582212200670c95432e929473c7279b5a5eb0197a9a25cd96894b0be3ed88fe978ddc63f64736f6c63430008140033";

type TamkinTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TamkinTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TamkinToken__factory extends ContractFactory {
  constructor(...args: TamkinTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    initialSupply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(initialSupply, overrides || {});
  }
  override deploy(
    initialSupply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(initialSupply, overrides || {}) as Promise<
      TamkinToken & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TamkinToken__factory {
    return super.connect(runner) as TamkinToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TamkinTokenInterface {
    return new Interface(_abi) as TamkinTokenInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TamkinToken {
    return new Contract(address, _abi, runner) as unknown as TamkinToken;
  }
}
