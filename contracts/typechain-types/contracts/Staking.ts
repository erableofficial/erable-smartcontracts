/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Staking {
  export type StakeStruct = {
    amount: BigNumberish;
    startTime: BigNumberish;
    requestUnstakeTime: BigNumberish;
    unstakeRequested: boolean;
  };

  export type StakeStructOutput = [
    amount: bigint,
    startTime: bigint,
    requestUnstakeTime: bigint,
    unstakeRequested: boolean
  ] & {
    amount: bigint;
    startTime: bigint;
    requestUnstakeTime: bigint;
    unstakeRequested: boolean;
  };
}

export interface StakingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addToWhitelist"
      | "calculateTax"
      | "calculateTotalWithdraw"
      | "calculateYield"
      | "claim"
      | "cooldownPeriod"
      | "depositRewardTokens"
      | "disableWhitelist"
      | "enableWhitelist"
      | "getTotalStakedForUser"
      | "getUserStakes"
      | "initialize"
      | "maxCap"
      | "minCap"
      | "monthlyIncreasePercentage"
      | "monthsInStakingPeriod"
      | "owner"
      | "pause"
      | "paused"
      | "pendingRewards"
      | "removeFromWhitelist"
      | "renounceOwnership"
      | "rewardPool"
      | "stake"
      | "stakingDuration"
      | "stakingToken"
      | "startingSlashingPoint"
      | "totalStaked"
      | "transferOwnership"
      | "unpause"
      | "unstake"
      | "updateCooldownPeriod"
      | "updateMaxCap"
      | "updateMinCap"
      | "updateMonthlyIncreasePercentage"
      | "updateStakingDuration"
      | "updateStartingSlashingPoint"
      | "updateYieldConstant"
      | "userStakeCounter"
      | "userStakes"
      | "whitelistEnabled"
      | "whitelistedAddresses"
      | "withdrawRewardTokens"
      | "yieldConstant"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deposit"
      | "Initialized"
      | "OwnershipTransferred"
      | "Paused"
      | "RewardPaid"
      | "Staked"
      | "Unpaused"
      | "UnstakeRequested"
      | "WhitelistStatusChanged"
      | "Withdraw"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTax",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTotalWithdraw",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateYield",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "cooldownPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositRewardTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStakedForUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(functionFragment: "maxCap", values?: undefined): string;
  encodeFunctionData(functionFragment: "minCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "monthlyIncreasePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "monthsInStakingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakingDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startingSlashingPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCooldownPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMonthlyIncreasePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStakingDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStartingSlashingPoint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateYieldConstant",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userStakeCounter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userStakes",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedAddresses",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewardTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "yieldConstant",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTotalWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cooldownPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStakedForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxCap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "monthlyIncreasePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "monthsInStakingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startingSlashingPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCooldownPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMonthlyIncreasePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStakingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStartingSlashingPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateYieldConstant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userStakeCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userStakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yieldConstant",
    data: BytesLike
  ): Result;
}

export namespace DepositEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardPaidEvent {
  export type InputTuple = [user: AddressLike, reward: BigNumberish];
  export type OutputTuple = [user: string, reward: bigint];
  export interface OutputObject {
    user: string;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnstakeRequestedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistStatusChangedEvent {
  export type InputTuple = [user: AddressLike, status: boolean];
  export type OutputTuple = [user: string, status: boolean];
  export interface OutputObject {
    user: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Staking extends BaseContract {
  connect(runner?: ContractRunner | null): Staking;
  waitForDeployment(): Promise<this>;

  interface: StakingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addToWhitelist: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  calculateTax: TypedContractMethod<
    [
      timeStaked: BigNumberish,
      _monthlyIncreasePercentage: BigNumberish,
      _startingSlashingPoint: BigNumberish,
      _stakingDuration: BigNumberish
    ],
    [bigint],
    "view"
  >;

  calculateTotalWithdraw: TypedContractMethod<
    [
      _amount: BigNumberish,
      timeStaked: BigNumberish,
      _yieldConstant: BigNumberish,
      _monthlyIncreasePercentage: BigNumberish,
      _startingSlashingPoint: BigNumberish,
      _stakingDuration: BigNumberish
    ],
    [bigint],
    "view"
  >;

  calculateYield: TypedContractMethod<
    [
      timeStaked: BigNumberish,
      _yieldConstant: BigNumberish,
      _stakingDuration: BigNumberish
    ],
    [bigint],
    "view"
  >;

  claim: TypedContractMethod<[stakeId: BigNumberish], [void], "nonpayable">;

  cooldownPeriod: TypedContractMethod<[], [bigint], "view">;

  depositRewardTokens: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  disableWhitelist: TypedContractMethod<[], [void], "nonpayable">;

  enableWhitelist: TypedContractMethod<[], [void], "nonpayable">;

  getTotalStakedForUser: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUserStakes: TypedContractMethod<
    [user: AddressLike],
    [Staking.StakeStructOutput[]],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _owner: AddressLike,
      _stakingToken: AddressLike,
      _stakingDuration: BigNumberish,
      _yieldConstant: BigNumberish,
      _cooldownPeriod: BigNumberish,
      _startingSlashingPoint: BigNumberish,
      _monthlyIncreasePercentage: BigNumberish,
      _minCap: BigNumberish,
      _maxCap: BigNumberish,
      _whitelistEnabled: boolean
    ],
    [void],
    "nonpayable"
  >;

  maxCap: TypedContractMethod<[], [bigint], "view">;

  minCap: TypedContractMethod<[], [bigint], "view">;

  monthlyIncreasePercentage: TypedContractMethod<[], [bigint], "view">;

  monthsInStakingPeriod: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pendingRewards: TypedContractMethod<[], [bigint], "view">;

  removeFromWhitelist: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardPool: TypedContractMethod<[], [bigint], "view">;

  stake: TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  stakingDuration: TypedContractMethod<[], [bigint], "view">;

  stakingToken: TypedContractMethod<[], [string], "view">;

  startingSlashingPoint: TypedContractMethod<[], [bigint], "view">;

  totalStaked: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  unstake: TypedContractMethod<[stakeId: BigNumberish], [void], "nonpayable">;

  updateCooldownPeriod: TypedContractMethod<
    [_cooldownPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMaxCap: TypedContractMethod<
    [_maxCap: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMinCap: TypedContractMethod<
    [_minCap: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMonthlyIncreasePercentage: TypedContractMethod<
    [_monthlyIncreasePercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateStakingDuration: TypedContractMethod<
    [_stakingDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateStartingSlashingPoint: TypedContractMethod<
    [_startingSlashingPoint: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateYieldConstant: TypedContractMethod<
    [_yieldConstant: BigNumberish],
    [void],
    "nonpayable"
  >;

  userStakeCounter: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userStakes: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, boolean, bigint, bigint, bigint, bigint] & {
        amount: bigint;
        startTime: bigint;
        requestUnstakeTime: bigint;
        unstakeRequested: boolean;
        yieldConstant: bigint;
        monthlyIncreasePercentage: bigint;
        startingSlashingPoint: bigint;
        stakingDuration: bigint;
      }
    ],
    "view"
  >;

  whitelistEnabled: TypedContractMethod<[], [boolean], "view">;

  whitelistedAddresses: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  withdrawRewardTokens: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  yieldConstant: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addToWhitelist"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "calculateTax"
  ): TypedContractMethod<
    [
      timeStaked: BigNumberish,
      _monthlyIncreasePercentage: BigNumberish,
      _startingSlashingPoint: BigNumberish,
      _stakingDuration: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateTotalWithdraw"
  ): TypedContractMethod<
    [
      _amount: BigNumberish,
      timeStaked: BigNumberish,
      _yieldConstant: BigNumberish,
      _monthlyIncreasePercentage: BigNumberish,
      _startingSlashingPoint: BigNumberish,
      _stakingDuration: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateYield"
  ): TypedContractMethod<
    [
      timeStaked: BigNumberish,
      _yieldConstant: BigNumberish,
      _stakingDuration: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[stakeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cooldownPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositRewardTokens"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disableWhitelist"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableWhitelist"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getTotalStakedForUser"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserStakes"
  ): TypedContractMethod<
    [user: AddressLike],
    [Staking.StakeStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _owner: AddressLike,
      _stakingToken: AddressLike,
      _stakingDuration: BigNumberish,
      _yieldConstant: BigNumberish,
      _cooldownPeriod: BigNumberish,
      _startingSlashingPoint: BigNumberish,
      _monthlyIncreasePercentage: BigNumberish,
      _minCap: BigNumberish,
      _maxCap: BigNumberish,
      _whitelistEnabled: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maxCap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minCap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "monthlyIncreasePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "monthsInStakingPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingRewards"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeFromWhitelist"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardPool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakingDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakingToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "startingSlashingPoint"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalStaked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<[stakeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCooldownPeriod"
  ): TypedContractMethod<[_cooldownPeriod: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMaxCap"
  ): TypedContractMethod<[_maxCap: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMinCap"
  ): TypedContractMethod<[_minCap: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMonthlyIncreasePercentage"
  ): TypedContractMethod<
    [_monthlyIncreasePercentage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateStakingDuration"
  ): TypedContractMethod<
    [_stakingDuration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateStartingSlashingPoint"
  ): TypedContractMethod<
    [_startingSlashingPoint: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateYieldConstant"
  ): TypedContractMethod<[_yieldConstant: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userStakeCounter"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userStakes"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, boolean, bigint, bigint, bigint, bigint] & {
        amount: bigint;
        startTime: bigint;
        requestUnstakeTime: bigint;
        unstakeRequested: boolean;
        yieldConstant: bigint;
        monthlyIncreasePercentage: bigint;
        startingSlashingPoint: bigint;
        stakingDuration: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "whitelistEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "whitelistedAddresses"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdrawRewardTokens"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "yieldConstant"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RewardPaid"
  ): TypedContractEvent<
    RewardPaidEvent.InputTuple,
    RewardPaidEvent.OutputTuple,
    RewardPaidEvent.OutputObject
  >;
  getEvent(
    key: "Staked"
  ): TypedContractEvent<
    StakedEvent.InputTuple,
    StakedEvent.OutputTuple,
    StakedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UnstakeRequested"
  ): TypedContractEvent<
    UnstakeRequestedEvent.InputTuple,
    UnstakeRequestedEvent.OutputTuple,
    UnstakeRequestedEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistStatusChanged"
  ): TypedContractEvent<
    WhitelistStatusChangedEvent.InputTuple,
    WhitelistStatusChangedEvent.OutputTuple,
    WhitelistStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "Deposit(address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RewardPaid(address,uint256)": TypedContractEvent<
      RewardPaidEvent.InputTuple,
      RewardPaidEvent.OutputTuple,
      RewardPaidEvent.OutputObject
    >;
    RewardPaid: TypedContractEvent<
      RewardPaidEvent.InputTuple,
      RewardPaidEvent.OutputTuple,
      RewardPaidEvent.OutputObject
    >;

    "Staked(address,uint256)": TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
    Staked: TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UnstakeRequested(address,uint256)": TypedContractEvent<
      UnstakeRequestedEvent.InputTuple,
      UnstakeRequestedEvent.OutputTuple,
      UnstakeRequestedEvent.OutputObject
    >;
    UnstakeRequested: TypedContractEvent<
      UnstakeRequestedEvent.InputTuple,
      UnstakeRequestedEvent.OutputTuple,
      UnstakeRequestedEvent.OutputObject
    >;

    "WhitelistStatusChanged(address,bool)": TypedContractEvent<
      WhitelistStatusChangedEvent.InputTuple,
      WhitelistStatusChangedEvent.OutputTuple,
      WhitelistStatusChangedEvent.OutputObject
    >;
    WhitelistStatusChanged: TypedContractEvent<
      WhitelistStatusChangedEvent.InputTuple,
      WhitelistStatusChangedEvent.OutputTuple,
      WhitelistStatusChangedEvent.OutputObject
    >;

    "Withdraw(address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;

    "Withdrawn(address,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
