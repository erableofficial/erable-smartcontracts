/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MerkleAirdropInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "airdropCycles"
      | "checkClaimable"
      | "claimTokens"
      | "createAirdropCycle"
      | "depositTokens"
      | "disableAirdropCycle"
      | "hasClaimed"
      | "hasUserClaimed"
      | "owner"
      | "renounceOwnership"
      | "token"
      | "transferOwnership"
      | "withdrawTokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AirdropCycleCreated"
      | "AirdropCycleDisabled"
      | "LogLeaf"
      | "LogMerkleRoot"
      | "OwnershipTransferred"
      | "TokensClaimed"
      | "TokensDeposited"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "airdropCycles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkClaimable",
    values: [BigNumberish, AddressLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values: [BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createAirdropCycle",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableAirdropCycle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserClaimed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "airdropCycles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAirdropCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableAirdropCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasUserClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;
}

export namespace AirdropCycleCreatedEvent {
  export type InputTuple = [cycleIndex: BigNumberish, merkleRoot: BytesLike];
  export type OutputTuple = [cycleIndex: bigint, merkleRoot: string];
  export interface OutputObject {
    cycleIndex: bigint;
    merkleRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AirdropCycleDisabledEvent {
  export type InputTuple = [cycleIndex: BigNumberish];
  export type OutputTuple = [cycleIndex: bigint];
  export interface OutputObject {
    cycleIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogLeafEvent {
  export type InputTuple = [leaf: BytesLike];
  export type OutputTuple = [leaf: string];
  export interface OutputObject {
    leaf: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogMerkleRootEvent {
  export type InputTuple = [root: BytesLike];
  export type OutputTuple = [root: string];
  export interface OutputObject {
    root: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensClaimedEvent {
  export type InputTuple = [claimant: AddressLike, amount: BigNumberish];
  export type OutputTuple = [claimant: string, amount: bigint];
  export interface OutputObject {
    claimant: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensDepositedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MerkleAirdrop extends BaseContract {
  connect(runner?: ContractRunner | null): MerkleAirdrop;
  waitForDeployment(): Promise<this>;

  interface: MerkleAirdropInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  airdropCycles: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, boolean] & { merkleRoot: string; isActive: boolean }],
    "view"
  >;

  checkClaimable: TypedContractMethod<
    [
      cycleIndex: BigNumberish,
      wallet: AddressLike,
      amount: BigNumberish,
      proof: BytesLike[]
    ],
    [boolean],
    "view"
  >;

  claimTokens: TypedContractMethod<
    [cycleIndex: BigNumberish, amount: BigNumberish, proof: BytesLike[]],
    [void],
    "nonpayable"
  >;

  createAirdropCycle: TypedContractMethod<
    [_merkleRoot: BytesLike],
    [void],
    "nonpayable"
  >;

  depositTokens: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  disableAirdropCycle: TypedContractMethod<
    [cycleIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  hasClaimed: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  hasUserClaimed: TypedContractMethod<
    [cycleIndex: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  token: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawTokens: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "airdropCycles"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, boolean] & { merkleRoot: string; isActive: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkClaimable"
  ): TypedContractMethod<
    [
      cycleIndex: BigNumberish,
      wallet: AddressLike,
      amount: BigNumberish,
      proof: BytesLike[]
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimTokens"
  ): TypedContractMethod<
    [cycleIndex: BigNumberish, amount: BigNumberish, proof: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createAirdropCycle"
  ): TypedContractMethod<[_merkleRoot: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "depositTokens"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disableAirdropCycle"
  ): TypedContractMethod<[cycleIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hasClaimed"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasUserClaimed"
  ): TypedContractMethod<
    [cycleIndex: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawTokens"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AirdropCycleCreated"
  ): TypedContractEvent<
    AirdropCycleCreatedEvent.InputTuple,
    AirdropCycleCreatedEvent.OutputTuple,
    AirdropCycleCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AirdropCycleDisabled"
  ): TypedContractEvent<
    AirdropCycleDisabledEvent.InputTuple,
    AirdropCycleDisabledEvent.OutputTuple,
    AirdropCycleDisabledEvent.OutputObject
  >;
  getEvent(
    key: "LogLeaf"
  ): TypedContractEvent<
    LogLeafEvent.InputTuple,
    LogLeafEvent.OutputTuple,
    LogLeafEvent.OutputObject
  >;
  getEvent(
    key: "LogMerkleRoot"
  ): TypedContractEvent<
    LogMerkleRootEvent.InputTuple,
    LogMerkleRootEvent.OutputTuple,
    LogMerkleRootEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TokensClaimed"
  ): TypedContractEvent<
    TokensClaimedEvent.InputTuple,
    TokensClaimedEvent.OutputTuple,
    TokensClaimedEvent.OutputObject
  >;
  getEvent(
    key: "TokensDeposited"
  ): TypedContractEvent<
    TokensDepositedEvent.InputTuple,
    TokensDepositedEvent.OutputTuple,
    TokensDepositedEvent.OutputObject
  >;

  filters: {
    "AirdropCycleCreated(uint256,bytes32)": TypedContractEvent<
      AirdropCycleCreatedEvent.InputTuple,
      AirdropCycleCreatedEvent.OutputTuple,
      AirdropCycleCreatedEvent.OutputObject
    >;
    AirdropCycleCreated: TypedContractEvent<
      AirdropCycleCreatedEvent.InputTuple,
      AirdropCycleCreatedEvent.OutputTuple,
      AirdropCycleCreatedEvent.OutputObject
    >;

    "AirdropCycleDisabled(uint256)": TypedContractEvent<
      AirdropCycleDisabledEvent.InputTuple,
      AirdropCycleDisabledEvent.OutputTuple,
      AirdropCycleDisabledEvent.OutputObject
    >;
    AirdropCycleDisabled: TypedContractEvent<
      AirdropCycleDisabledEvent.InputTuple,
      AirdropCycleDisabledEvent.OutputTuple,
      AirdropCycleDisabledEvent.OutputObject
    >;

    "LogLeaf(bytes32)": TypedContractEvent<
      LogLeafEvent.InputTuple,
      LogLeafEvent.OutputTuple,
      LogLeafEvent.OutputObject
    >;
    LogLeaf: TypedContractEvent<
      LogLeafEvent.InputTuple,
      LogLeafEvent.OutputTuple,
      LogLeafEvent.OutputObject
    >;

    "LogMerkleRoot(bytes32)": TypedContractEvent<
      LogMerkleRootEvent.InputTuple,
      LogMerkleRootEvent.OutputTuple,
      LogMerkleRootEvent.OutputObject
    >;
    LogMerkleRoot: TypedContractEvent<
      LogMerkleRootEvent.InputTuple,
      LogMerkleRootEvent.OutputTuple,
      LogMerkleRootEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TokensClaimed(address,uint256)": TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;
    TokensClaimed: TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;

    "TokensDeposited(uint256)": TypedContractEvent<
      TokensDepositedEvent.InputTuple,
      TokensDepositedEvent.OutputTuple,
      TokensDepositedEvent.OutputObject
    >;
    TokensDeposited: TypedContractEvent<
      TokensDepositedEvent.InputTuple,
      TokensDepositedEvent.OutputTuple,
      TokensDepositedEvent.OutputObject
    >;
  };
}
